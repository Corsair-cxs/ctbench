#!/bin/sh

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local oid> <remote ref> <remote oid>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).

remote="$1"
url="$2"

docs_repo="git@github.com:JPenuchot/ctbench-docs.git"
docs_out_dir="/tmp/ctbench-docs"

srcdir=$(pwd)

branch=$(git rev-parse --abbrev-ref HEAD)

if [[ branch != "main" ]]; then
	exit 0
fi

echo "Updating docs..."

rm -rf $docs_out_dir
mkdir -p $docs_out_dir

mkdir build-docs
cd build-docs

echo "- Building docs..."

CXX=clang++ CC=clang cmake ../ -G Ninja \
	-DCMAKE_BUILD_TYPE=Release \
	-DDOXYGEN_HTML_OUTPUT=$docs_out_dir
ninja docs

cd ../
rm -rf build-docs

cd $docs_out_dir

echo "- ..."

git init
git add .
git commit -m "docs"
git remote add gh $docs_repo
git push gh --force
